{"./":{"url":"./","title":"首页","keywords":"","body":"Gitbook 使用文档 首先先献上 我的 GitBook 地址，可以在我的 博客 导航栏处找到，下面进行相关的介绍。 背景 由于之前都把零散的知识都写在 Gist 上，要查找的时候不是很系统化，所以打算挪到 GitBook 上来统一管理，而且 GitBook 写完编译后可以生成静态页面发布到博客上，逼格满满的样子。 GitBook 官网 "},"content/install.html":{"url":"content/install.html","title":"安装","keywords":"","body":"安装 GitBook 输入下面的命令来安装 GitBook。 $ npm install gitbook-cli -g 安装完成之后，你可以使用下面的命令来检验是否安装成功。 $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 1.初始化 打开一个文件夹 MyGitBook 使用 gitbook init 初始化文件夹，会自动生成两个必要的文件 README.md 和 SUMMARY.md $ gitbook init 文件 说明 README.md 书的介绍文字，如前言、简介，在章节中也可做为章节的简介。 SUMMARY.md 定制书籍的章节结构和顺序。 README.md 和 SUMMARY.md 是 GitBook 制作电子书的必要文件 2.预览 方式一： gitbook serve gitbook 会启动一个 4000 端口用于预览。 方式二： gitbook build 生成.html静态文件，配置后可以直接访问预览 "},"content/cmd.html":{"url":"content/cmd.html","title":"命令","keywords":"","body":"命令 以下命令都可以通过shell或者cmd来执行 通过gitbook -V命令查看是否安装成功。 通过npm安装 npm install gitbook-cli -g 初始化 新建一个文件夹，例如新建 mygitbook ，然后在该目录下执行命令： gitbook init 会自动生成两个必要的文件 README.md 和 SUMMARY.md。 预览 执行命令： gitbook serve gitbook会启动一个4000端口用于预览，可以在浏览器打开网址： http://localhost:4000 预览效果。 编译 执行命令： gitbook build 运行该命令后会在根文件夹生成一个 _book 文件夹，包含了书籍的所有 html 文件. 可以使用该命令来生成网页而不开启服务器，也可以将_book文件夹部署到服务器上。 GitBook 命令 这里将介绍GitBook的一些命令 输出gitbook的帮助信息 gitbook --help 生成静态网页并运行服务器 gitbook serve 生成静态网页 gitbook build 生成静态网页时指定gitbook的版本，如果本地没有将先下载 gitbook build --gitbook=3.2.3 列出所有的gitbook版本 gitbook ls 列出远程可用的gitbook版本 gitbook ls-remote 更新到gitbook的最新版本 gitbook update 卸载对应的gitbook版本 gitbook uninstall 3.2.3 安装依赖 gitbook install 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug "},"content/config.html":{"url":"content/config.html","title":"配置","keywords":"","body":"配置 变量 描述 root 包含所有图书文件的根文件夹的路径，除了 book.json structure 指定自述文件，摘要，词汇表等的路径，参考 Structure paragraph. title 您的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 description 您的书籍的描述，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 author 作者名。在GitBook.com上，这个字段是预填的。 isbn 国际标准书号 ISBN language 本书的语言类型 —— ISO code 。默认值是 en direction 文本阅读顺序。可以是 rtl （从右向左）或 ltr （从左向右），默认值依赖于 language 的值。 gitbook 应该使用的GitBook版本。使用 SemVer 规范，并接受类似于 “> = 3.0.0” 的条件。 root 包含所有图书文件的根文件夹的路径， book.json 文件除外。 例： \"root\" : \"./docs\", structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名。 title 电子书的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预先填写的。 例： \"title\" : \"gitbook-notes\", author 作者姓名，在GitBook.com上，这个字段是预先填写的。 例： \"author\" : \"victor zhang\" description 电子书的描述，默认值是从 README 中提取出来的。在GitBook.com上，这个字段是预先填写的。 例： \"description\" : \"Gitbook 教程\" direction 文本的方向。可以是 rtl 或 ltr，默认值取决于语言的值。 例： \"direction\" : \"ltr\" gitbook 应该使用的GitBook版本。使用SemVer规范，接受类似于 >=3.0.0 的条件。 例： \"gitbook\" : \"3.0.0\", \"gitbook\" : \">=3.0.0\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例： \"language\" : \"zh-hans\", links 在左侧导航栏添加链接信息 例： \"links\" : { \"sidebar\" : { \"Home\" : \"https://github.com/dunwu/gitbook-notes\" } } styles 自定义页面样式， 默认情况下各generator对应的css文件 例： \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如要使 h1、h2 标签有下边框， 可以在 website.css 中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } plugins 插件列表 可以在插件前面加-符号删除默认插件，默认五种插件如下，更多插件 highlight：代码高亮 search：导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 pluginsConfig 配置插件的属性 参考： { \"title\": \"G笔记\", \"description\": \"好记性不如G笔记\", \"author\": \"lijiam\", \"output.name\": \"site\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"root\": \".\", \"links\": { \"sidebar\": { \"首页\": \"http://www.lijiam.com\" } }, \"plugins\": [ \"code\", \"-search\", \"search-pro\", \"github\", \"splitter\", \"tbfed-pagefooter\", \"donate\", \"-sharing\", \"sharing-plus\", \"prism\", \"-highlight\", \"styles-less\", \"toggle-chapters\", \"multipart\", \"ancre-navigation\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/lijiam\" }, \"code\": { \"copyButtons\": true }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © lijiam 2019\", \"modify_label\": \"本书发布时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"donate\": { \"wechat\": \"/assets/images/wxpay.png\", \"alipay\": \"/assets/images/alipay.png\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" }, \"sharing\": { \"facebook\": true, \"twitter\": true, \"weibo\": true, \"qq\": true, \"all\": [ \"douban\", \"google\", \"qzone\", \"linkedin\" ] }, \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ], \"lang\": { \"flow\": \"typescript\" } } }, \"styles\": { \"website\": \"assets/styles/website.less\", \"ebook\": \"assets/styles/ebook.less\", \"pdf\": \"assets/styles/pdf.less\", \"mobi\": \"assets/styles/mobi.less\", \"epub\": \"assets/styles/epub.less\" } } "},"content/plugs.html":{"url":"content/plugs.html","title":"插件","keywords":"","body":"安装插件 在根目录下创建book.json文件 1、 配置 在book.json的plugins参数中添加插件名。 如： { \"plugins\": [\"mathjax\"] } 2、安装： 打开终端 gitbook install 或 npm install gitbook-plugin-插件名 3、重启服务或者重新打包 如果使用gitbook install安装的很慢，建议使用npm init初始化一个package.json文件，然后每个包通过npm命令安装，以后就可以通过npm install一键快速安装依赖包了。 注意： 1、插件一定先要在book.json文件里面plugins中才能生效，如果只是安装了插件，而没配置的话是不会生效的。 2、gitbook命令安装慢，而且是全部插件都安装一遍，如果只安装一个插件的话建议使用NPM命令安装。 插件列表 plugins 配置使用的插件 \"plugins\": [ \"-search\", \"back-to-top-button\", \"expandable-chapters-small\", \"insert-logo\" ] 其中-search中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： 插件 说明 highlight 代码高亮 search 导航栏查询功能（不支持中文） sharing 右上角分享功能 font-settings 字体设置（最上方的\"A\"符号） livereload 为GitBook实时重新加载 插件属性配置pluginsConfig 配置插件的属性 例如配置insert-logo的属性： \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } 一些实用插件 记录一些实用的插件 用法：在book.json中添加\"plugins\"和\"pluginConfig\"字段。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-插件名，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） "},"content/related.html":{"url":"content/related.html","title":"相关资料","keywords":"","body":"相关资料 gitbook安装与使用（含常用插件和book.json配置详解） GitBook插件整理 类似线文档 VuePress看云语雀BookStackdocsifyDocuteMinDocWikittenDokuWikiMkDocs北半球（疑似关闭）知笔墨（疑似关闭）Penflip 总结 如果希望托管在平台，请根据项目数量选择使用GitBook或者看云 如果自建，轻量级的推荐docsify，内容多推荐DokuWiki "},"content/related_error.html":{"url":"content/related_error.html","title":"相关错误","keywords":"","body":"相关错误 编译报错gitbook\\gitbook-plugin-fontsettings\\fontsettings.js gitbook build命令运行包错，具体如下： 找到当前文件 copyPluginAssets.js C:\\Users\\32631\\.gitbook\\versions\\3.2.3\\lib\\output\\website 112行 和 67行 解决方案：注释掉112行和67行或者改为false 如图： "},"content/MarkDown标签.html":{"url":"content/MarkDown标签.html","title":"MarkDown标签","keywords":"","body":"MarkDown标签 代码 ``` ``` 效果 echo \"我是php代码块\" 标题 #一级标题 ##二级标题 ###三级标题 ####四级标题 #####五级标题 ######六级标题 效果 一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 字体 *倾斜* **加粗** ***加粗倾斜*** ~~删除~~ ---横线 效果 倾斜 加粗 加粗倾斜 删除 ---横线 引用 >大于号右面的字全部在引用里面 效果 这是引用的内容 图片 ![]( \"\") ![图片](图片地址 \"图片title\") 图片alt就是显示在图片下方的文字 图片title是图片的标题，鼠标移动到图片上才会显示，可有可无 效果 超链接 []( \"\") [超链接名](超链接地址 \"超链接title\") title可有可无 效果 PHP博客 列表 列表嵌套在下一级敲3个空格即可 有序列表：数字加点加一个空格就是有序列表 1. 列表内容 2. 列表内容 3. 列表内容 无序列表：+-*加一个空格就是无序列表 + 列表内容 - 列表内容 * 列表内容 效果 列表内容 列表内容 列表内容 列表内容 列表内容 列表内容 原样输出 加\\转义 相关资料 Markdown 语法整理大集合2017 Markdown创建表格 "}}